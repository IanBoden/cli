#!/bin/bash


function channel_select_iot() {
  case $MAS_CHANNEL in
    8.9.x)
      MAS_APP_CHANNEL_IOT=8.6.x
      ;;
    8.8.x)
      MAS_APP_CHANNEL_IOT=8.5.x
      ;;
    8.7.x)
      MAS_APP_CHANNEL_IOT=8.4.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_IOT
      ;;
  esac
  true
}

function channel_select_monitor() {
  case $MAS_CHANNEL in
    8.9.x)
      MAS_APP_CHANNEL_MONITOR=8.9.x
      ;;
    8.8.x)
      MAS_APP_CHANNEL_MONITOR=8.8.x
      ;;
    8.7.x)
      MAS_APP_CHANNEL_MONITOR=8.7.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_MONITOR
      ;;
  esac
  true
}

function channel_select_manage() {
  case $MAS_CHANNEL in
    8.9.x)
      MAS_APP_CHANNEL_MANAGE=8.5.x
      ;;
    8.8.x)
      MAS_APP_CHANNEL_MANAGE=8.4.x
      ;;
    8.7.x)
      MAS_APP_CHANNEL_MANAGE=8.3.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_MANAGE
      ;;
  esac
  true
}

function channel_select_predict() {
  if [[ -z "$AIRGAP_MODE" ]]; then
    case $MAS_CHANNEL in
      8.9.x)
        MAS_APP_CHANNEL_PREDICT=8.7.x
        ;;
      8.8.x)
        MAS_APP_CHANNEL_PREDICT=8.6.x
        ;;
      8.7.x)
        MAS_APP_CHANNEL_PREDICT=8.5.x
        ;;
      *)
        prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_PREDICT
        ;;
    esac
  else
    MAS_APP_CHANNEL_PREDICT=""
    echo_warning "Sorry, air gap install of this application is not supported yet"
    exit 1
  fi
  true
}

function channel_select_hputilities() {
  if [[ -z "$AIRGAP_MODE" ]]; then
    case $MAS_CHANNEL in
      8.9.x)
        MAS_APP_CHANNEL_HPUTILITIES=8.5.x
        ;;
      8.8.x)
        MAS_APP_CHANNEL_HPUTILITIES=8.4.x
        ;;
      8.7.x)
        MAS_APP_CHANNEL_HPUTILITIES=8.3.x
        ;;
      *)
        prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_HPUTILITIES
        ;;
    esac
  else
    MAS_APP_CHANNEL_HPUTILITIES=""
    echo_warning "Sorry, air gap install of this application is not supported yet"
    exit 1
  fi
  true
}

function channel_select_optimizer() {
  case $MAS_CHANNEL in
    8.9.x)
      MAS_APP_CHANNEL_OPTIMIZER=8.3.x
      ;;
    8.8.x)
      MAS_APP_CHANNEL_OPTIMIZER=8.2.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_OPTIMIZER
      ;;
  esac
  true
}

function channel_select_assist() {
  if [[ -z "$AIRGAP_MODE" ]]; then
    case $MAS_CHANNEL in
      8.9.x)
        MAS_APP_CHANNEL_ASSIST=8.6.x
        ;;
      8.8.x)
        MAS_APP_CHANNEL_ASSIST=8.5.x
        ;;
      8.7.x)
        MAS_APP_CHANNEL_ASSIST=8.4.x
        ;;
      *)
        prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_ASSIST
        ;;
    esac
  else
    MAS_APP_CHANNEL_ASSIST=""
    echo_warning "Sorry, air gap install of this application is not supported yet"
    exit 1
  fi
  true
}

function channel_select_visualinspection() {
  case $MAS_CHANNEL in
    8.9.x)
      MAS_APP_CHANNEL_VISUALINSPECTION=8.7.x
      ;;
    8.8.x)
      MAS_APP_CHANNEL_VISUALINSPECTION=8.6.x
      ;;
    8.7.x)
      MAS_APP_CHANNEL_VISUALINSPECTION=8.5.x
      ;;
    *)
      prompt_for_input 'Custom Subscription Channel' MAS_APP_CHANNEL_VISUALINSPECTION
      ;;
  esac
  true
}

# The list of apps is stored in APP_LIST in utils the default is:
#   supports single node openshift (override by APP_INSTALL_DICT[<<app>>,sno]=false)
#   supports airgap (override by APP_INSTALL_DICT[<<app>>,airgap]=false)
#   has no prereqs (set by APP_INSTALL_DICT[<<app>>,prereq]=<<prereqApp>>)
#   on selection calls channel_select_<<app>> (override by APP_INSTALL_DICT[<<app>>,func]=<<function>>)
#   supports all channels (override by APP_INSTALL_DICT[<<app>>,unsupported_channel]=<<channel>>)
# Current limitations:
#   single node openshift and airgap support are binary but probably will need to be channel dependant
#     ie "APP_INSTALL_DICT[iot,sno]=false" means don't support sno at all
#        "APP_INSTALL_DCIT[iot,sno,8.8.x]=false" means don't support sno on channel 8.8.x
#   prereqs only supports a single app may need to be a list
#   unsupported channels only supports a single channel will probably need to be a list

declare -A APP_INSTALL_DICT
# IOT
APP_INSTALL_DICT[iot,sno]=false
# MONITOR
APP_INSTALL_DICT[monitor,airgap]=false
APP_INSTALL_DICT[monitor,pre]=iot
# MANAGE
APP_INSTALL_DICT[manage,func]=selected_manage
# OPTIMIZER
APP_INSTALL_DICT[optimizer,sno]=false
APP_INSTALL_DICT[optimizer,unsupported_channel]=8.7.x
APP_INSTALL_DICT[optimizer,func]=selected_optimizer
# VISUALINSPECTION
APP_INSTALL_DICT[visualinspection,sno]=false
# PREDICT
APP_INSTALL_DICT[predict,sno]=false
APP_INSTALL_DICT[predict,pre]=manage
APP_INSTALL_DICT[predict,airgap]=false
# ASSIST
APP_INSTALL_DICT[assist,sno]=false
APP_INSTALL_DICT[assist,pre]=manage
APP_INSTALL_DICT[assist,airgap]=false
# HPUTILITIES
APP_INSTALL_DICT[hputilities,sno]=false
APP_INSTALL_DICT[hputilities,pre]=predict
APP_INSTALL_DICT[hputilities,airgap]=false

function selected_manage() {
  channel_select_manage
  prompt_for_confirm_default_yes "+ Create demo data" MAS_APP_SETTINGS_DEMODATA
  if prompt_for_confirm "+ Configure JMS"; then
    MAS_APP_SETTINGS_PERSISTENT_VOLUMES_FLAG=true
    MAS_APP_SETTINGS_SERVER_BUNDLES_SIZE="jms"
  fi
}

function selected_optimizer() {
  channel_select_optimizer
  while : ; do
    prompt_for_input '+ Plan [full/limited]' MAS_APP_PLAN_OPTIMIZER "full"
    [[ "$MAS_APP_PLAN_OPTIMIZER" != "full" && "$MAS_APP_PLAN_OPTIMIZER" != "limited" ]] || break
  done
}

function selected_assist() {
  channel_select_assist
  while : ; do
    prompt_for_input 'COS Provider [ibm/ocs]' COS_TYPE "ibm"
    [[ "$COS_TYPE" != "ibm" && "$COS_TYPE" != "ocs" ]] || break
  done
  prompt_for_input "IBM Cloud API Key" IBMCLOUD_APIKEY $IBMCLOUD_APIKEY
  prompt_for_input "IBM Cloud Resource Group" IBMCLOUD_RESOURCEGROUP $IBMCLOUD_RESOURCEGROUP "Default"
}

function config_pipeline_applications() {
  echo
  echo_h2 "6. Application Selection"
  declare -A install
  for app in "${APP_LIST[@]}"
  do
    if [[ ! -z ${APP_INSTALL_DICT[$app,pre]} ]]
    then
       if [[ ${install[${APP_INSTALL_DICT[$app,pre]}]} -ne 1 ]]
       then
         echo "${TEXT_DIM}Skipping $app due to missing prereq ${APP_INSTALL_DICT[$app,pre]}${TEXT_RESET}"
         continue
       fi
    fi

    if [[ ! -z ${APP_INSTALL_DICT[$app,unsupported_channel]} ]]
    then
       echo "checking level!!!${TEXT_RESET}"
       if [[ ${APP_INSTALL_DICT[$app,unsupported_channel]} = "$MAS_CHANNEL" ]]
       then
         echo "${TEXT_DIM}Skipping $app due to not supporting channel $MAS_CHANNEL${TEXT_RESET}"
         continue
       fi
    fi

    if [[ "$SNO_MODE" == "true" &&  ! -z ${APP_INSTALL_DICT[$app,sno]} ]]
    then
      echo "${TEXT_DIM}Skipping $app due to not supporting Single Node Openshift${TEXT_RESET}"
      continue
    fi
    if [[ "$AIRGAP_MODE" == "true" && ! -z ${APP_INSTALL_DICT[$app,airgap]} ]]
    then
      echo "${TEXT_DIM}Skipping $app due to not supporting airgap${TEXT_RESET}"
      continue
    fi
    if prompt_for_confirm "Install $app"
    then
      install[$app]=1
      if [[ -z ${APP_INSTALL_DICT[$app,func]} ]]
      then
        function="channel_select_$app"
        $function
      else
        ${APP_INSTALL_DICT[$app,func]}
      fi
    fi
  done
  for app in "${APP_LIST[@]}"
  do
    if [[ ${install[$app]} -ne 1 ]]
    then
      var="MAS_APP_CHANNEL_${app^^}"
      printf -v "${var}" ''
    fi
  done

  if [[ "$MAS_APP_CHANNEL_PREDICT" != "" || "$MAS_APP_CHANNEL_HPUTILITIES" != "" || "$MAS_APP_CHANNEL_ASSIST" != "" ]]; then
    case $MAS_CATALOG_VERSION in
      # CP4D v4.6.0 was added in the February 2023 catalog update
      v8-amd64|v8-230217-amd64|v8-230314-amd64)
        CP4D_VERSION=4.6.0
        ;;
      # Versions of the catalog older than February 2023 support up to CP4D v4.5.2
      v8-230111-amd64|v8-221228-amd64|v8-221129-amd64)
        CP4D_VERSION=4.5.2
        ;;
      *)
        echo
        echo "One or more selected applications require Cloud Pak for Data"
        prompt_for_input 'Cloud Pak for Data product version' CP4D_VERSION "4.6.0"
        ;;
    esac
  fi
}
